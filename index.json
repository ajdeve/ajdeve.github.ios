[{"content":"Thread VS. Process Thread VS. Process 프로세스는 독립적이며 프로세스 안에는 스레드가 있다. 프로세스에게 주어진 메모리는 공유가 가능하지 않으면 프로세스 안에 있는 스레드들은 자원과 메모리를 공유한다.\n정의 스레드와-프로세스\n특이점  Process는 서로 소통하지 않지만 IPC(Inter Process Communication) 라는게 존재한다 JAVA에는 프로세스라는게 존재하지 않는다, Java.exe 자체가 프로세스다. 프로세스라는 것은 프로그램과 같은 개념으로 볼 수 있다. 동시다발적으로 요청을 처리하기 위해 스레드를 사용할 수 있다.  이해도 향상을 위한 그림 코드 예시 public class MyThread extends Thread {\npublic void run(){ System.out.println(\u0026#34;MyThread running\u0026#34;); } } MyThread myThread = new MyThread(); myTread.start(); OR\nThread thread = new Thread(){ public void run(){ System.out.println(\u0026#34;Thread Running\u0026#34;); } } thread.start(); Thread 스타트로 소환된 thread에서 run이 실행될때 \u0026ldquo;Thread Running\u0026quot;이 출력됨\n","permalink":"https://ajdeve.github.io/post/thread-vs.-process/","summary":"Thread VS. Process Thread VS. Process 프로세스는 독립적이며 프로세스 안에는 스레드가 있다. 프로세스에게 주어진 메모리는 공유가 가능하지 않으면 프로세스 안에 있는 스레드들은 자원과 메모리를 공유한다.\n정의 스레드와-프로세스\n특이점  Process는 서로 소통하지 않지만 IPC(Inter Process Communication) 라는게 존재한다 JAVA에는 프로세스라는게 존재하지 않는다, Java.exe 자체가 프로세스다. 프로세스라는 것은 프로그램과 같은 개념으로 볼 수 있다. 동시다발적으로 요청을 처리하기 위해 스레드를 사용할 수 있다.  이해도 향상을 위한 그림 코드 예시 public class MyThread extends Thread {","title":"Thread VS. Process"},{"content":"Web 기본 Web 개발 기술   http 프로토콜 기반의 지원 기술\n  client단 개발 기술\n 화면 구성 html: 구조  서버에 전송하고자 하는 입력 양식 (input from)   css: 보기 좋게 꾸미는 언어 Java script: 브라우저 화면을 동적 처리를 위한 언어  모든 서버단 언어와 소통이 가능 화면단 처리 언어 Java와 non-java와 소통 가능      server단 개발 기술 (back)\n Java 기반: Servle \u0026amp; JSP  servlet  java 기반의 웹 처리 스펙 controller   JSP  Java 코드 보다는 jsp 자체 tag + html tag + css + java script 위주의 화면단 처리 스펙 Java 코드 보다는 jsp 자체 tag 위주의 화면단 처리 스펙 Java의 데이터값을 브라우저 화면에 출력하게 하는 기술 화면 처리 언어 html과 가장 큰 차이점  html은 자바 코드 활용 불가       php, asp, django\u0026hellip;  python 기반의 분석      front + back = full stack\n  Java 는 Servlet과 소통한다.\n","permalink":"https://ajdeve.github.io/post/web01/","summary":"Web 기본 Web 개발 기술   http 프로토콜 기반의 지원 기술\n  client단 개발 기술\n 화면 구성 html: 구조  서버에 전송하고자 하는 입력 양식 (input from)   css: 보기 좋게 꾸미는 언어 Java script: 브라우저 화면을 동적 처리를 위한 언어  모든 서버단 언어와 소통이 가능 화면단 처리 언어 Java와 non-java와 소통 가능      server단 개발 기술 (back)\n Java 기반: Servle \u0026amp; JSP  servlet  java 기반의 웹 처리 스펙 controller   JSP  Java 코드 보다는 jsp 자체 tag + html tag + css + java script 위주의 화면단 처리 스펙 Java 코드 보다는 jsp 자체 tag 위주의 화면단 처리 스펙 Java의 데이터값을 브라우저 화면에 출력하게 하는 기술 화면 처리 언어 html과 가장 큰 차이점  html은 자바 코드 활용 불가       php, asp, django\u0026hellip;  python 기반의 분석      front + back = full stack","title":"Web Beginner Series 1"},{"content":"JAVA Level 1. 기초 메서드 1. System.out 활용 메서드 - 출력 public static void main(String[] args) { System.out.print(\u0026#34;Hello World\u0026#34;); } - String 출력 public static void main(String[] args) { String h = \u0026#34;Hello World\u0026#34;; System.out.print(h); } - String + 출력 public static void main(String[] args) { String a = \u0026#34;Hello\u0026#34;; String b = \u0026#34; \u0026#34;; String c = \u0026#34;World\u0026#34;; System.out.print(a + b + c); } - String 출력 +, ++, if, == public static void main(String[] args) { String a = \u0026#34;Hello\u0026#34;; String b = \u0026#34; \u0026#34;; String c = \u0026#34;World\u0026#34;; int i = 1; i++; if (i == 2) { System.out.println(a + b + c); }else { System.out.println(b); } } 2. charAt 활용 메서드 - 출력 charAt, for, ++, String public static void main(String[] args) { String java = \u0026#34;Hello World!\u0026#34;; for(int i = 0; i \u0026lt; java.length(); i++) { char character = java.charAt(i); System.out.print(character); } 3. class 활용 메서드 - Class +, new class A{ String a = \u0026#34;Hello world!\u0026#34;; } public class ExampleSet { public static void main(String[] args) { A a = new A(); System.out.println(a.a); } } - Class +, new, + class B{ String b = \u0026#34;Hello \u0026#34;; } class C{ String c = \u0026#34;world!\u0026#34;; } public class ExampleSet { public static void main(String[] args) { B b = new B(); C c = new C(); System.out.println(b.b + c.c); } } - Class +, Array, new, + class D { String[] d = { \u0026#34;Hello \u0026#34;, \u0026#34;world!\u0026#34; }; } public class ExampleSet { public static void main(String[] args) { D d = new D(); System.out.println(d.d[0] + d.d[1]); } } ","permalink":"https://ajdeve.github.io/post/java1/","summary":"JAVA Level 1. 기초 메서드 1. System.out 활용 메서드 - 출력 public static void main(String[] args) { System.out.print(\u0026#34;Hello World\u0026#34;); } - String 출력 public static void main(String[] args) { String h = \u0026#34;Hello World\u0026#34;; System.out.print(h); } - String + 출력 public static void main(String[] args) { String a = \u0026#34;Hello\u0026#34;; String b = \u0026#34; \u0026#34;; String c = \u0026#34;World\u0026#34;; System.out.print(a + b + c); } - String 출력 +, ++, if, == public static void main(String[] args) { String a = \u0026#34;Hello\u0026#34;; String b = \u0026#34; \u0026#34;; String c = \u0026#34;World\u0026#34;; int i = 1; i++; if (i == 2) { System.","title":"JAVA Method Examples"},{"content":"JDBC 환경세팅 CASE: 하나의 Team에는 한명의 Member가 있는 상황 @OneToOne   eclipse에서 new java project 생성\n  마우스 오른쪽 클릭 → configure → maven project\n  마우스 오른쪽 클릭 → configure → JPA project\n  pom.xml setup\n  Dependency \u0026amp; Repository setup\n\u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;javax.persistence\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;javax.persistence-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.hibernate\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;hibernate-entitymanager\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;5.4.2.Final\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.18.8\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.jslsolucoes\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;ojdbc6\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;11.2.0.1.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.junit.platform\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit-platform-runner\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0.1\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.junit.jupiter\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit-jupiter-engine\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;5.0.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.junit.jupiter\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit-jupiter-params\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;5.0.1\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- @Slf4j 사용을 위한 library 설정 \u0026amp; log4j.properties 필요 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.slf4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;slf4j-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.7.5\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.slf4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;slf4j-log4j12\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.7.5\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;repositories\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;oracle\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;ORACLE JDBC Repository\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;https://maven.atlassian.com/3rdparty/\u0026lt;/url\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;/repositories\u0026gt;     log4j properties 파일을 src 안으로 복사하고 붙여넣는다.\n  log4j.properties\n# Set root category priority to INFO and its only appender to CONSOLE. log4j.rootCategory= INFO, CONSOLE, daily \\u200B # CONSOLE is set to be a ConsoleAppender using a PatternLayout. log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout log4j.appender.CONSOLE.layout.ConversionPattern=- [%-p] %m%n \\u200B log4j.appender.daily=org.apache.log4j.DailyRollingFileAppender log4j.appender.daily.File=C:\\\\ITStudy\\\\88.log\\\\fiveguys.log #C:\\\\ITStudy\\\\88.log log4j.appender.daily.DatePattern='.'yyyy-MM-dd log4j.appender.daily.layout=org.apache.log4j.PatternLayout log4j.appender.daily.layout.ConversionPattern=- [%-p] %d{dd-MM-yyyy HH:mm:ss} %F %m%n     META INF 안의 persistence.xml 파일 설정\n  persistence.xml\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;persistence version=\u0026quot;2.1\u0026quot; xmlns=\u0026quot;http://xmlns.jcp.org/xml/ns/persistence\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xsi:schemaLocation=\u0026quot;http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\u0026quot;\u0026gt; \u0026lt;persistence-unit name=\u0026quot;oracleDBUse\u0026quot;\u0026gt; \u0026lt;class\u0026gt;entity2.Member\u0026lt;/class\u0026gt; \u0026lt;class\u0026gt;entity2.Team\u0026lt;/class\u0026gt; \u0026lt;!-- \u0026lt;class\u0026gt;entity.Member\u0026lt;/class\u0026gt; \u0026lt;class\u0026gt;entity.Team\u0026lt;/class\u0026gt; --\u0026gt; \u0026lt;!-- \u0026lt;class\u0026gt;step01.entity.Dept01\u0026lt;/class\u0026gt; --\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;property name=\u0026quot;javax.persistence.jdbc.driver\u0026quot; value=\u0026quot;oracle.jdbc.OracleDriver\u0026quot; /\u0026gt; \u0026lt;property name=\u0026quot;javax.persistence.jdbc.url\u0026quot; value=\u0026quot;jdbc:oracle:thin:@127.0.0.1:1521:xe\u0026quot; /\u0026gt; \u0026lt;property name=\u0026quot;javax.persistence.jdbc.user\u0026quot; value=\u0026quot;SCOTT\u0026quot; /\u0026gt; \u0026lt;property name=\u0026quot;javax.persistence.jdbc.password\u0026quot; value=\u0026quot;TIGER\u0026quot; /\u0026gt; \u0026lt;property name=\u0026quot;hibernate.dialect\u0026quot; value=\u0026quot;org.hibernate.dialect.OracleDialect\u0026quot; /\u0026gt; \u0026lt;property name=\u0026quot;hibernate.show_sql\u0026quot; value=\u0026quot;true\u0026quot; /\u0026gt; \u0026lt;property name=\u0026quot;hibernate.format_sql\u0026quot; value=\u0026quot;true\u0026quot; /\u0026gt; \u0026lt;!--\u0026lt;property name=\u0026quot;hibernate.use_sql_comments\u0026quot; value=\u0026quot;true\u0026quot; /\u0026gt; --\u0026gt; \u0026lt;property name=\u0026quot;hibernate.id.new_generator_mappings\u0026quot; value=\u0026quot;true\u0026quot; /\u0026gt; \u0026lt;property name=\u0026quot;hibernate.hbm2ddl.auto\u0026quot; value=\u0026quot;create\u0026quot; /\u0026gt; \u0026lt;!-- \u0026lt;property name=\u0026quot;hibernate.hbm2ddl.auto\u0026quot; value=\u0026quot;none\u0026quot; /\u0026gt; --\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;/persistence-unit\u0026gt; \u0026lt;/persistence\u0026gt; persistence.xml 파일에서 db 접속 정보 설정 tag 확인해서 아이디 패스워드 확인\n    Entity, Test 와 Util java class를 만들어서 테스트 환경 조성\n  Entity 주의사항\n  @Entity 애노테이션 선언\n  persistence.xml 에 등록 (persistence file 눌러 JPA synchronize 하여 class 연동하기)\n  각 컬럼별 이름, 사이즈 조절\n  String 타입은 length로 사이즈 조절\n  Number 타입읁 BigDecimal, precision으로 조절\n  @Column\n  @GeneratedValue(strategy=GenerationType.SEQUENCE\n//콘솔창에 뜨는 해당 사항 drop sequence hibernate_sequence Hibernate: create sequence hibernate_sequence start with 1 increment by 1 3.@Column(length=20, nullable=false)     Team (Parent Class)\n@NoArgsConstructor @AllArgsConstructor @Builder @Getter @Setter @Entity @SequenceGenerator(name=\u0026#34;TEAM_ID_SEQ\u0026#34;, sequenceName = \u0026#34;TEAM_SEQ\u0026#34;, initialValue = 1, allocationSize = 50) public class Team { @Id @GeneratedValue (strategy=GenerationType.SEQUENCE, generator=\u0026#34;TEAM_ID_SEQ\u0026#34;) @Column (name=\u0026#34;team_id\u0026#34;) private Long teamId; @Column (name = \u0026#34;team_name\u0026#34;, length = 20) private String teamName; }   Member (Child Class)\n@NoArgsConstructor @AllArgsConstructor @Builder @Getter @Setter @Entity @SequenceGenerator(name=\u0026#34;MEMBER_ID_SEQ\u0026#34;, sequenceName = \u0026#34;MEMBER_ID\u0026#34;, initialValue = 1, allocationSize = 50) public class Member { @Id @GeneratedValue (strategy=GenerationType.SEQUENCE, generator=\u0026#34;MEMBER_ID_SEQ\u0026#34;) //sequence  @Column (name=\u0026#34;member_id\u0026#34;) private Long memberId; @Column (name = \u0026#34;member_name\u0026#34;, length = 20) private String memberName; @Column (name=\u0026#34;member_age\u0026#34;) private Integer memberAge; @OneToOne @JoinColumn (name = \u0026#34;team_id\u0026#34;, referencedColumnName = \u0026#34;team_id\u0026#34;) private Team teamId; }     Test\nEntityManager의 개별 메소드로 crud 하는 실행 클래스\npublic class RunningTest { //step02  @Test public void runningTest() { EntityManager em = PublicCommon.getEntityManager(); EntityTransaction tx = em.getTransaction(); tx.begin(); try { Team t1 = Team.builder().teamName(\u0026#34;team A\u0026#34;).build(); em.persist(t1); Team t2 = Team.builder().teamName(\u0026#34;team B\u0026#34;).build(); em.persist(t2); // member 객체 생성 후 insert 시도할 경우 member의 teamid는 이미 존재하는 team 이어야함  Member m1 = Member.builder().memberName(\u0026#34;유재석\u0026#34;).teamId(t1).memberAge(50).build(); em.persist(m1); Member m2 = Member.builder().memberName(\u0026#34;강재석\u0026#34;).teamId(t2).memberAge(40).build(); em.persist(m2); tx.commit(); } catch(Exception e) { e.printStackTrace(); } finally { em.close(); } }   Util\n실행 클래스에 활용될 Util 클래스 개발\n EntiyManagerFactory EntityManager  package util; import javax.persistence.EntityManager; import javax.persistence.EntityManagerFactory; import javax.persistence.Persistence; public class PublicCommon { //db driver처럼 한번만 메모리 생성 후 저장 및 쭉 재사용  private static EntityManagerFactory emf; //멤버변수 초기화  static { emf = Persistence.createEntityManagerFactory(\u0026#34;oracleDBUse\u0026#34;); } //CRUD 로직별 생성 및 client는 공유 금지  //EntityManager 반환  public static EntityManager getEntityManager() { return emf.createEntityManager(); } //자원반환 em.close()는 매번 상황에 맡겨서 하기  public static void close(EntityManager em) { emf.close(); } }     ","permalink":"https://ajdeve.github.io/post/jdbc1/","summary":"JDBC 환경세팅 CASE: 하나의 Team에는 한명의 Member가 있는 상황 @OneToOne   eclipse에서 new java project 생성\n  마우스 오른쪽 클릭 → configure → maven project\n  마우스 오른쪽 클릭 → configure → JPA project\n  pom.xml setup\n  Dependency \u0026amp; Repository setup\n\u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;javax.persistence\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;javax.persistence-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.hibernate\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;hibernate-entitymanager\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;5.4.2.Final\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.18.8\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.jslsolucoes\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;ojdbc6\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;11.2.0.1.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.junit.platform\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit-platform-runner\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.","title":"JDBC 환경세팅"},{"content":"JDBC\u0026amp;JPA JDBC, JPA/Hibernate를 사용할때 제일 헷갈리는 부분을 아래와 같이 정리했다.\nflush() : DB에 실제 쿼리를 날려 execute하는 기능이며 commit이 아니기에 DB에 반영이 되지 않는다.\nclear() : 영속성 컨텍스트에 저장한 데이터를 지워버린다.\ncommit() : DB에 저장,수정,삭제를 반영한다.\nrollback:() : DB에 저장하지 않고 영속성 컨텍스트 데이터를 날린다.\n","permalink":"https://ajdeve.github.io/post/jdbc0/","summary":"JDBC\u0026amp;JPA JDBC, JPA/Hibernate를 사용할때 제일 헷갈리는 부분을 아래와 같이 정리했다.\nflush() : DB에 실제 쿼리를 날려 execute하는 기능이며 commit이 아니기에 DB에 반영이 되지 않는다.\nclear() : 영속성 컨텍스트에 저장한 데이터를 지워버린다.\ncommit() : DB에 저장,수정,삭제를 반영한다.\nrollback:() : DB에 저장하지 않고 영속성 컨텍스트 데이터를 날린다.","title":"JDBC\u0026JPA"}]