<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on AJ&#39;s DEV LIFE</title>
    <link>https://ajdeve.github.io/post/</link>
    <description>Recent content in Posts on AJ&#39;s DEV LIFE</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 26 Jan 2021 11:30:03 +0000</lastBuildDate><atom:link href="https://ajdeve.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Framework</title>
      <link>https://ajdeve.github.io/post/spring-framework/</link>
      <pubDate>Tue, 26 Jan 2021 11:30:03 +0000</pubDate>
      
      <guid>https://ajdeve.github.io/post/spring-framework/</guid>
      <description>Spring Framework  Rod Johnson이 2003년 개발한 Spring Framework는 JavaEE 앱을 쉽게 만들게 한다. 객체를 한곳에서 모아서 관리하며 표준화와 정형화된 코드를 짤 수 있게 하는 프레임워크!
Spring Framework + Business Logic (컨텐츠) = Application
 Spring Framework란?  자바 플랫폼을 위한 오픈소스 애플리케이션 프레임워크로서 엔터프라이즈급 애플리케이션을 개발하기 위한 모든 기능을 종합적으로 제공하는 경량급 애플리케이션 프레임워크 Spirng Framework는 경량 컨테이너로 자바 객체를 담고 직접 관리한다. 객체의 생성 및 소멸 그리고 라이프 사이클을관리하며 언제든 Spring 컨테이너로 부터 필요한 객체를 가져와 사용할 수 있다.</description>
    </item>
    
    <item>
      <title>DOM vs. Virtual DOM</title>
      <link>https://ajdeve.github.io/post/domvsvdom/</link>
      <pubDate>Sat, 23 Jan 2021 11:30:03 +0000</pubDate>
      
      <guid>https://ajdeve.github.io/post/domvsvdom/</guid>
      <description>DOM (돔) 정의  Document Object Model 그리고 문서 객체 모델이며 HTML 및 XML 문서를 위한 API이다. 이 DOM이란 트리 구조로 되어있는 객체 모델로써, Javascript가 getElementbyid()를 같은 함수를 이용하여 HTML문서의 각 요소(li, head같은 태그들)들을 접근하고 사용할 수 있도록 하는 객체 모델이다. 브라우저마다 DOM을 구현하는 방식은 다르기에 DOM이라는 것이 구체적으로 정해저 있는 언어나 모델과 같은 것은 아니다. 다만 웹페이지를 객체로 표현한 모델을 의미할 뿐이다.  DOM 의 트리구조 예시 브라우저가 돔을 이용해서 화면을 렌더링 하는 방법 예시 첫째, 브라우저는 html태그를 파싱 하여 돔 트리를 구성한다.</description>
    </item>
    
    <item>
      <title>Servlet &amp; JSP</title>
      <link>https://ajdeve.github.io/post/servlet-jsp/</link>
      <pubDate>Sun, 17 Jan 2021 11:30:03 +0000</pubDate>
      
      <guid>https://ajdeve.github.io/post/servlet-jsp/</guid>
      <description>Servlet &amp;amp; JSP 정의 Servlet: 서블렛은 Java class로서 서버의 요청을 다루기 위해 쓰인다.
 서블렛을 통해 사용자의 input을 모으거나, DB에서 레코드를 출력한다거나 dynamic web page들을 생성하거나 할 수 있다. 쉽게 말하면 &amp;ldquo;클라이언트의 요구를 받아 그에 대한 처리를 한 후, 결과를 되돌려주는 서버 모듈&amp;quot;이다. 서블릿은 JSP에서 컨텐츠와 비즈니스 로직을 분리한다. JSP가 텍스트 파일 구조인데 비해 서블릿은 자바 클래스 구조이다.  출처: https://ddo-o.tistory.com/77 [공순이의 블로그]
Servlet 돌아가는 과정 서블렛은 Servlet Container (서블렛 컨테이너)에게서 컨트롤된다.</description>
    </item>
    
    <item>
      <title>Vue.js 시작</title>
      <link>https://ajdeve.github.io/post/vue.js/</link>
      <pubDate>Thu, 14 Jan 2021 11:30:03 +0000</pubDate>
      
      <guid>https://ajdeve.github.io/post/vue.js/</guid>
      <description>Vue.js 정의 Vue.js Frontend를 쉽게 접근할 수 있게 하는 JS library
MVVM Pattern MVC와 비슷하지만 다른 MVVM 패턴
MVC VS. MVVM MVC: Controller와 Model이 Backend, View가 Frontend MVVM: 모든 요소가 Front이며 Javascript &amp;amp;HTML
설치 Vue.js 사이트에서 설치 script 가져와 Head tag 전에 삽입 &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 중요 문법 Vue Instance 와 Key Attribute &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;input tyv-model=&amp;#34;name&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;  &amp;lt;script&amp;gt; let model = { &amp;#34;name&amp;#34;: &amp;#34;hugo&amp;#34;}; let vm = new Vue({ el: &amp;#34;app&amp;#34;, data: model }); &amp;lt;/script&amp;gt; 중요 문법: v-show, v-if, v-if-else v-show와 v-if</description>
    </item>
    
    <item>
      <title>Thread VS. Process</title>
      <link>https://ajdeve.github.io/post/thread-vs.-process/</link>
      <pubDate>Tue, 12 Jan 2021 11:30:03 +0000</pubDate>
      
      <guid>https://ajdeve.github.io/post/thread-vs.-process/</guid>
      <description>Thread VS. Process Thread VS. Process 프로세스는 독립적이며 프로세스 안에는 스레드가 있다. 프로세스에게 주어진 메모리는 공유가 가능하지 않으면 프로세스 안에 있는 스레드들은 자원과 메모리를 공유한다.
정의 스레드와-프로세스
특이점  Process는 서로 소통하지 않지만 IPC(Inter Process Communication) 라는게 존재한다 JAVA에는 프로세스라는게 존재하지 않는다, Java.exe 자체가 프로세스다. 프로세스라는 것은 프로그램과 같은 개념으로 볼 수 있다. 동시다발적으로 요청을 처리하기 위해 스레드를 사용할 수 있다.  이해도 향상을 위한 그림 코드 예시 public class MyThread extends Thread { public void run(){ System.</description>
    </item>
    
    <item>
      <title>Web Beginner Series 1</title>
      <link>https://ajdeve.github.io/post/web01/</link>
      <pubDate>Tue, 15 Dec 2020 11:30:03 +0000</pubDate>
      
      <guid>https://ajdeve.github.io/post/web01/</guid>
      <description>Web 기본 Web 개발 기술   http 프로토콜 기반의 지원 기술
  client단 개발 기술
 화면 구성 html: 구조  서버에 전송하고자 하는 입력 양식 (input from)   css: 보기 좋게 꾸미는 언어 Java script: 브라우저 화면을 동적 처리를 위한 언어  모든 서버단 언어와 소통이 가능 화면단 처리 언어 Java와 non-java와 소통 가능      server단 개발 기술 (back)
 Java 기반: Servle &amp;amp; JSP  servlet  java 기반의 웹 처리 스펙 controller   JSP  Java 코드 보다는 jsp 자체 tag + html tag + css + java script 위주의 화면단 처리 스펙 Java 코드 보다는 jsp 자체 tag 위주의 화면단 처리 스펙 Java의 데이터값을 브라우저 화면에 출력하게 하는 기술 화면 처리 언어 html과 가장 큰 차이점  html은 자바 코드 활용 불가       php, asp, django&amp;hellip;  python 기반의 분석      front + back = full stack</description>
    </item>
    
    <item>
      <title>JAVA Method Examples</title>
      <link>https://ajdeve.github.io/post/java1/</link>
      <pubDate>Tue, 15 Sep 2020 11:30:03 +0000</pubDate>
      
      <guid>https://ajdeve.github.io/post/java1/</guid>
      <description>JAVA Level 1. 기초 메서드 1. System.out 활용 메서드 - 출력 public static void main(String[] args) { System.out.print(&amp;#34;Hello World&amp;#34;); } - String 출력 public static void main(String[] args) { String h = &amp;#34;Hello World&amp;#34;; System.out.print(h); } - String + 출력 public static void main(String[] args) { String a = &amp;#34;Hello&amp;#34;; String b = &amp;#34; &amp;#34;; String c = &amp;#34;World&amp;#34;; System.out.print(a + b + c); } - String 출력 +, ++, if, == public static void main(String[] args) { String a = &amp;#34;Hello&amp;#34;; String b = &amp;#34; &amp;#34;; String c = &amp;#34;World&amp;#34;; int i = 1; i++; if (i == 2) { System.</description>
    </item>
    
    <item>
      <title>JDBC 환경세팅</title>
      <link>https://ajdeve.github.io/post/jdbc1/</link>
      <pubDate>Tue, 15 Sep 2020 11:30:03 +0000</pubDate>
      
      <guid>https://ajdeve.github.io/post/jdbc1/</guid>
      <description>JDBC 환경세팅 CASE: 하나의 Team에는 한명의 Member가 있는 상황 @OneToOne   eclipse에서 new java project 생성
  마우스 오른쪽 클릭 → configure → maven project
  마우스 오른쪽 클릭 → configure → JPA project
  pom.xml setup
  Dependency &amp;amp; Repository setup
&amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.persistence&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;javax.persistence-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hibernate-entitymanager&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.4.2.Final&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.18.8&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.jslsolucoes&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;ojdbc6&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;11.2.0.1.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.junit.platform&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit-platform-runner&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.</description>
    </item>
    
    <item>
      <title>JDBC&amp;JPA</title>
      <link>https://ajdeve.github.io/post/jdbc0/</link>
      <pubDate>Tue, 15 Sep 2020 11:30:03 +0000</pubDate>
      
      <guid>https://ajdeve.github.io/post/jdbc0/</guid>
      <description>JDBC&amp;amp;JPA JDBC, JPA/Hibernate를 사용할때 제일 헷갈리는 부분을 아래와 같이 정리했다.
flush() : DB에 실제 쿼리를 날려 execute하는 기능이며 commit이 아니기에 DB에 반영이 되지 않는다.
clear() : 영속성 컨텍스트에 저장한 데이터를 지워버린다.
commit() : DB에 저장,수정,삭제를 반영한다.
rollback:() : DB에 저장하지 않고 영속성 컨텍스트 데이터를 날린다.</description>
    </item>
    
  </channel>
</rss>
