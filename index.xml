<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AJ&#39;s DEV LIFE</title>
    <link>https://ajdeve.github.io/</link>
    <description>Recent content on AJ&#39;s DEV LIFE</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 14 Jan 2021 11:30:03 +0000</lastBuildDate><atom:link href="https://ajdeve.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Thread VS. Process</title>
      <link>https://ajdeve.github.io/post/vue.js/</link>
      <pubDate>Thu, 14 Jan 2021 11:30:03 +0000</pubDate>
      
      <guid>https://ajdeve.github.io/post/vue.js/</guid>
      <description>Vue.js 정의 Vue.js Frontend를 쉽게 접근할 수 있게 하는 JS library
MVVM Pattern MVC와 비슷하지만 다른 MVVM 패턴
MVC VS. MVVM MVC: Controller와 Model이 Backend, View가 Frontend MVVM: 모든 요소가 Front이며 Javascript &amp;amp;HTML
설치 Vue.js 사이트에서 설치 script 가져와 Head tag 전에 삽입 &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 중요 문법 Vue Instance 와 Key Attribute &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;input tyv-model=&amp;#34;name&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;  &amp;lt;script&amp;gt; let model = { &amp;#34;name&amp;#34;: &amp;#34;hugo&amp;#34;}; let vm = new Vue({ el: &amp;#34;app&amp;#34;, data: model }); &amp;lt;/script&amp;gt; 중요 문법: v-show, v-if, v-if-else v-show와 v-if</description>
    </item>
    
    <item>
      <title>Thread VS. Process</title>
      <link>https://ajdeve.github.io/post/thread-vs.-process/</link>
      <pubDate>Tue, 12 Jan 2021 11:30:03 +0000</pubDate>
      
      <guid>https://ajdeve.github.io/post/thread-vs.-process/</guid>
      <description>Thread VS. Process Thread VS. Process 프로세스는 독립적이며 프로세스 안에는 스레드가 있다. 프로세스에게 주어진 메모리는 공유가 가능하지 않으면 프로세스 안에 있는 스레드들은 자원과 메모리를 공유한다.
정의 스레드와-프로세스
특이점  Process는 서로 소통하지 않지만 IPC(Inter Process Communication) 라는게 존재한다 JAVA에는 프로세스라는게 존재하지 않는다, Java.exe 자체가 프로세스다. 프로세스라는 것은 프로그램과 같은 개념으로 볼 수 있다. 동시다발적으로 요청을 처리하기 위해 스레드를 사용할 수 있다.  이해도 향상을 위한 그림 코드 예시 public class MyThread extends Thread { public void run(){ System.</description>
    </item>
    
    <item>
      <title>Web Beginner Series 1</title>
      <link>https://ajdeve.github.io/post/web01/</link>
      <pubDate>Tue, 15 Dec 2020 11:30:03 +0000</pubDate>
      
      <guid>https://ajdeve.github.io/post/web01/</guid>
      <description>Web 기본 Web 개발 기술   http 프로토콜 기반의 지원 기술
  client단 개발 기술
 화면 구성 html: 구조  서버에 전송하고자 하는 입력 양식 (input from)   css: 보기 좋게 꾸미는 언어 Java script: 브라우저 화면을 동적 처리를 위한 언어  모든 서버단 언어와 소통이 가능 화면단 처리 언어 Java와 non-java와 소통 가능      server단 개발 기술 (back)
 Java 기반: Servle &amp;amp; JSP  servlet  java 기반의 웹 처리 스펙 controller   JSP  Java 코드 보다는 jsp 자체 tag + html tag + css + java script 위주의 화면단 처리 스펙 Java 코드 보다는 jsp 자체 tag 위주의 화면단 처리 스펙 Java의 데이터값을 브라우저 화면에 출력하게 하는 기술 화면 처리 언어 html과 가장 큰 차이점  html은 자바 코드 활용 불가       php, asp, django&amp;hellip;  python 기반의 분석      front + back = full stack</description>
    </item>
    
    <item>
      <title>JAVA Method Examples</title>
      <link>https://ajdeve.github.io/post/java1/</link>
      <pubDate>Tue, 15 Sep 2020 11:30:03 +0000</pubDate>
      
      <guid>https://ajdeve.github.io/post/java1/</guid>
      <description>JAVA Level 1. 기초 메서드 1. System.out 활용 메서드 - 출력 public static void main(String[] args) { System.out.print(&amp;#34;Hello World&amp;#34;); } - String 출력 public static void main(String[] args) { String h = &amp;#34;Hello World&amp;#34;; System.out.print(h); } - String + 출력 public static void main(String[] args) { String a = &amp;#34;Hello&amp;#34;; String b = &amp;#34; &amp;#34;; String c = &amp;#34;World&amp;#34;; System.out.print(a + b + c); } - String 출력 +, ++, if, == public static void main(String[] args) { String a = &amp;#34;Hello&amp;#34;; String b = &amp;#34; &amp;#34;; String c = &amp;#34;World&amp;#34;; int i = 1; i++; if (i == 2) { System.</description>
    </item>
    
    <item>
      <title>JDBC 환경세팅</title>
      <link>https://ajdeve.github.io/post/jdbc1/</link>
      <pubDate>Tue, 15 Sep 2020 11:30:03 +0000</pubDate>
      
      <guid>https://ajdeve.github.io/post/jdbc1/</guid>
      <description>JDBC 환경세팅 CASE: 하나의 Team에는 한명의 Member가 있는 상황 @OneToOne   eclipse에서 new java project 생성
  마우스 오른쪽 클릭 → configure → maven project
  마우스 오른쪽 클릭 → configure → JPA project
  pom.xml setup
  Dependency &amp;amp; Repository setup
&amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.persistence&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;javax.persistence-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hibernate-entitymanager&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.4.2.Final&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.18.8&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.jslsolucoes&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;ojdbc6&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;11.2.0.1.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.junit.platform&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit-platform-runner&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.</description>
    </item>
    
    <item>
      <title>JDBC&amp;JPA</title>
      <link>https://ajdeve.github.io/post/jdbc0/</link>
      <pubDate>Tue, 15 Sep 2020 11:30:03 +0000</pubDate>
      
      <guid>https://ajdeve.github.io/post/jdbc0/</guid>
      <description>JDBC&amp;amp;JPA JDBC, JPA/Hibernate를 사용할때 제일 헷갈리는 부분을 아래와 같이 정리했다.
flush() : DB에 실제 쿼리를 날려 execute하는 기능이며 commit이 아니기에 DB에 반영이 되지 않는다.
clear() : 영속성 컨텍스트에 저장한 데이터를 지워버린다.
commit() : DB에 저장,수정,삭제를 반영한다.
rollback:() : DB에 저장하지 않고 영속성 컨텍스트 데이터를 날린다.</description>
    </item>
    
  </channel>
</rss>
